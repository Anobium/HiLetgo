'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program examines the GLCD devices and shows the registers on a serial port/terminal, and, or can determine the type of glcd controller.
'''
'''This is a standalone program with no supporting libraries.
'''
'''This is an 8-bit for the GLCD controller and supports the mcufriend.com connection options, see below.
'''
'''The program has three options, all controlled by constants.
'''   1. Partial display of registers
'''   2. Display of all 256 registers
'''   3. Examine the registers to determine controller type.
'''
'''Refer to the datasheet of the specific device is the controller type is not recognised.
'''
'''@author     Evan Venn
'''@licence    GPL
'''@version    1.00
'''@date       31/3/19
'''********************************************************************************

  #chip mega328p, 16
  #option explicit

  #include <uno_mega328p.h >



'   Scan a sub-set of registers
    #define partialScan

'   Scan all 256 registers
'   #define fullScan

'   Using some level of intelligence try to determine the type of device.
    #define determineType

    'Only try this when all else has failed
'    #define 8bitMode

    'Pin mappings for bus
    #define GLCD_RD       ANALOG_0          ' read command line
    #define GLCD_WR       ANALOG_1          ' write command line
    #define GLCD_RS       ANALOG_2          ' Command/Data line
    #define GLCD_CS       ANALOG_3          ' Chip select line
    #define GLCD_RST      ANALOG_4          ' Reset line

    #define GLCD_DB0       DIGITAL_8
    #define GLCD_DB1       DIGITAL_9
    #define GLCD_DB2       DIGITAL_2
    #define GLCD_DB3       DIGITAL_3
    #define GLCD_DB4       DIGITAL_4
    #define GLCD_DB5       DIGITAL_5
    #define GLCD_DB6       DIGITAL_6
    #define GLCD_DB7       DIGITAL_7


      'USART settings
      #define USART_BAUD_RATE 9600
      #define USART_TX_BLOCKING

      HserPrintLn("Read Registers on GLCD UNO shield")
      HserPrintLn("controllers either read as single 16-bit")
      HserPrintLn("e.g. the ID is at GLCDreadReg(0)")
      HserPrintLn("or as a sequence of 8-bit values")
      HserPrintLn("in special locations (first is dummy)")
      HserPrintLn("")
      #ifndef 8bitMode
          HSerPrintLn("Operting in 16-bit addressing mode")
      #endif
      #ifdef 8bitMode
          HSerPrintLn("Operting in 8-bit addressing mode")
      #endif
      HserPrintLn("")

      GLCDInit
      GLCDSetWriteDir

      #ifdef fullScan
        dim studyreg as byte
        for studyreg = 0 to 255
            GLCDreadRegStr(studyreg, 7, "f.k")
        next
      #endif

      #ifdef partialScan
        GLCDreadRegStr(0x00, 2, "ID ILI9320, ILI9325, ILI9335, HX8347-G (0x75)...")
        GLCDreadRegStr(0x04, 4, "Manufacturer ID")
        GLCDreadRegStr(0x09, 5, "Status Register")
        GLCDreadRegStr(0x0A, 2, "Get Power Mode")
        GLCDreadRegStr(0x0C, 2, "Get Pixel Format")
        GLCDreadRegStr(0x61, 2, "RDID1 HX8347-G")
        GLCDreadRegStr(0x62, 2, "RDID2 HX8347-G")
        GLCDreadRegStr(0x63, 2, "RDID3 HX8347-G")
        GLCDreadRegStr(0x64, 2, "RDID1 HX8347-A")
        GLCDreadRegStr(0x65, 2, "RDID2 HX8347-A")
        GLCDreadRegStr(0x66, 2, "RDID3 HX8347-A")
        GLCDreadRegStr(0x67, 2, "RDID Himax HX8347-A")
        GLCDreadRegStr(0x70, 2, "Panel Himax HX8347-A")
        GLCDreadRegStr(0xA1, 5, "RD_DDB SSD1963")
        GLCDreadRegStr(0xB0, 2, "RGB Interface Signal Control")
        GLCDreadRegStr(0xB4, 2, "Inversion Control")
        GLCDreadRegStr(0xB6, 5, "Display Control")
        GLCDreadRegStr(0xB7, 2, "Entry Mode Set")
        GLCDreadRegStr(0xBF, 6, "ILI9481, HX8357-B")
        GLCDreadRegStr(0xC0, 9, "Panel Control")
        GLCDreadRegStr(0xC8, 13, "GAMMA")
        GLCDreadRegStr(0xCC, 2, "Panel Control")
        GLCDreadRegStr(0xD0, 3, "Power Control")
        GLCDreadRegStr(0xD2, 5, "NVM Read")
        GLCDreadRegStr(0xD3, 4, "ILI9341, ILI9488")
        GLCDreadRegStr(0xDA, 2, "RDID1")
        GLCDreadRegStr(0xDB, 2, "RDID2")
        GLCDreadRegStr(0xDC, 2, "RDID3")
        GLCDreadRegStr(0xE0, 16, "GAMMA-P")
        GLCDreadRegStr(0xE1, 16, "GAMMA-N")
        GLCDreadRegStr(0xEF, 6, "ILI9327")
        GLCDreadRegStr(0xF2, 12, "Adjust Control 2")
        GLCDreadRegStr(0xF6, 4, "Interface Control")
      #endif

      #ifdef determineType
        dim identifier as word
        dim devicestr as string
        GLCDInit
        GLCDSetWriteDir

        HSerPrintLn ("")
        HSerPrintLN("Examining  : GLCD Device ID ")
        GLCDreadID ( identifier )'also sets 'devicestr', a global string variable
        HSerPrint  ("Read       : GLCD Device ID = ")
        HSerPrint "0x"
        HSerPrint hex( identifier_h )
        HSerPrintLn hex( identifier )


        if identifier  = 0x9325 then
          Hserprintln("Controller : GLCD ILI9325")
        else if (identifier = 0x9328) then
          Hserprintln("Controller : GLCD ILI9328")
        else if (identifier = 0x9341) then
          Hserprintln("Controller : GLCD ILI9341")
        else if (identifier = 0x8357) then
          Hserprintln("Controller : GLCD HX8357D")
        else if identifier <> 0 then
          Hserprintln("Controller : "+devicestr )
        else
          HSerPrintLn("Controller : reg(0x00) returned Unknown GLCD")
        end if

        HSerPrintLn ("Completed  :")
        HSerPrintLn ("")
      #endif

Sub GLCDInit

      #define HX8347_GLCD_RST GLCD_RST
      #define HX8347_GLCD_CS GLCD_CS
      #define HX8347_GLCD_RS GLCD_RS
      #define HX8347_GLCD_WR GLCD_WR
      #define HX8347_GLCD_RD GLCD_RD


      #define HX8347_GLCD_DB0 GLCD_DB0
      #define HX8347_GLCD_DB1 GLCD_DB1
      #define HX8347_GLCD_DB2 GLCD_DB2
      #define HX8347_GLCD_DB3 GLCD_DB3
      #define HX8347_GLCD_DB4 GLCD_DB4
      #define HX8347_GLCD_DB5 GLCD_DB5
      #define HX8347_GLCD_DB6 GLCD_DB6
      #define HX8347_GLCD_DB7 GLCD_DB7

      'Set pin directions
      Dir HX8347_GLCD_RD  Out
      Dir HX8347_GLCD_WR  Out
      Dir HX8347_GLCD_RS  Out
      Dir HX8347_GLCD_CS  Out
      Dir HX8347_GLCD_RST Out

      HX8347_GLCD_RD = 1
      HX8347_GLCD_WR = 1
      HX8347_GLCD_RS = 1
      HX8347_GLCD_CS = 1
      HX8347_GLCD_RST = 1

      GlcdReset
      wait 150 ms


End Sub

Sub GLCDSetWriteDir

      dir  HX8347_GLCD_DB7 OUT
      dir  HX8347_GLCD_DB6 OUT
      dir  HX8347_GLCD_DB5 OUT
      dir  HX8347_GLCD_DB4 OUT
      dir  HX8347_GLCD_DB3 OUT
      dir  HX8347_GLCD_DB2 OUT
      dir  HX8347_GLCD_DB1 OUT
      dir  HX8347_GLCD_DB0 OUT

End Sub


Sub GLCDSetReadDir

      dir  HX8347_GLCD_DB7 IN
      dir  HX8347_GLCD_DB6 IN
      dir  HX8347_GLCD_DB5 IN
      dir  HX8347_GLCD_DB4 IN
      dir  HX8347_GLCD_DB3 IN
      dir  HX8347_GLCD_DB2 IN
      dir  HX8347_GLCD_DB1 IN
      dir  HX8347_GLCD_DB0 IN

End Sub

Sub GLCDreadRegStr( reg as word, nparams, lnmsg as string )

    dim val8 as byte
'    GlcdReset
    GlcdSetWriteDir
'    GLCDSendCommand(0xB0) ' Command Access Protect
'    GLCDSendData(0x00)    ' looks wrong

    GLCDSendCommand(reg)
    HserPrint("reg(0x")
    HSerPrint hex(reg_h)
    HSerPrint hex(reg)
    HserPrint(")")
    GlcdSetReadDir

    repeat nparams
        val8 = glcdReadData8
        HserPrint(" ")
        HSerPrint hex(val8)
    end repeat

    glcdSetWriteDir
    HserSend 9
    HserPrintLn(lnmsg)


End Sub

function GLCDreadReg16( reg as byte ) as word

'    GlcdReset
    GlcdSetWriteDir
    GLCDSendCommand(0xB0) ' Command Access Protect
    GLCDSendData(0x00)    ' looks wrong

    GLCDSendCommand(reg)
    GlcdSetReadDir

    GLCDreadReg16 = glcdReadData16
    glcdSetWriteDir

End Function

function GLCDreadReg8( reg as byte ) as byte

'    GlcdReset
    GlcdSetWriteDir
    GLCDSendCommand(0xB0) ' Command Access Protect
    GLCDSendData(0x00)    ' looks wrong

    GLCDSendCommand(reg)
    GlcdSetReadDir

    GLCDreadReg8 = glcdReadData8
    glcdSetWriteDir

End Function


Sub GlcdReset

    'Reset
    HX8347_GLCD_RST = 0
    Wait 15 ms
    HX8347_GLCD_RST = 1
    Wait 15 ms

End Sub

    dim GlcdReadData8 as byte
function GlcdReadData8 as byte

    glcdSetReadDir
    HX8347_GLCD_CS = 0
    HX8347_GLCD_RS = 1
    HX8347_GLCD_RD = 1
    HX8347_GLCD_WR = 1

    HX8347_GLCD_RD = 0
    wait 10 us
    GlcdReadData8.7 = HX8347_GLCD_DB7
    GlcdReadData8.6 = HX8347_GLCD_DB6
    GlcdReadData8.5 = HX8347_GLCD_DB5
    GlcdReadData8.4 = HX8347_GLCD_DB4
    GlcdReadData8.3 = HX8347_GLCD_DB3
    GlcdReadData8.2 = HX8347_GLCD_DB2
    GlcdReadData8.1 = HX8347_GLCD_DB1
    GlcdReadData8.0 = HX8347_GLCD_DB0
    HX8347_GLCD_RD = 1
    wait 10 us

End function

    dim GlcdReadData16 as word
function GlcdReadData16 as word

    glcdSetReadDir
    HX8347_GLCD_CS = 0
    HX8347_GLCD_RS = 1
    HX8347_GLCD_RD = 1
    HX8347_GLCD_WR = 1

    HX8347_GLCD_RD = 0
    wait 10 us
    GlcdReadData16.15 = HX8347_GLCD_DB7
    GlcdReadData16.14 = HX8347_GLCD_DB6
    GlcdReadData16.13 = HX8347_GLCD_DB5
    GlcdReadData16.12 = HX8347_GLCD_DB4
    GlcdReadData16.11 = HX8347_GLCD_DB3
    GlcdReadData16.10 = HX8347_GLCD_DB2
    GlcdReadData16.9  = HX8347_GLCD_DB1
    GlcdReadData16.8  = HX8347_GLCD_DB0
    HX8347_GLCD_RD = 1
    wait 10 us

    HX8347_GLCD_RD = 0
    wait 10 us
    GlcdReadData16.7 = HX8347_GLCD_DB7
    GlcdReadData16.6 = HX8347_GLCD_DB6
    GlcdReadData16.5 = HX8347_GLCD_DB5
    GlcdReadData16.4 = HX8347_GLCD_DB4
    GlcdReadData16.3 = HX8347_GLCD_DB3
    GlcdReadData16.2 = HX8347_GLCD_DB2
    GlcdReadData16.1 = HX8347_GLCD_DB1
    GlcdReadData16.0 = HX8347_GLCD_DB0
    HX8347_GLCD_RD = 1
    wait 10 us
End function

sub  GLCDSendCommand( IN HX8347SendByte as word )

    glcdSetWriteDir
    HX8347_GLCD_CS = 0
    HX8347_GLCD_RS = 0
    HX8347_GLCD_RD = 1

    #ifndef  8bitMode
      HX8347_GLCD_WR = 1
      PORTD = (PORTD & 0B00000011) | ((HX8347SendByte_h) & 0B11111100);
      PORTB = (PORTB & 0B11111100) | ((HX8347SendByte_h) & 0B00000011);
      HX8347_GLCD_WR = 0
      wait 10 us
    #endif

    HX8347_GLCD_WR = 1
    PORTD = (PORTD & 0B00000011) | ((HX8347SendByte) & 0B11111100);
    PORTB = (PORTB & 0B11111100) | ((HX8347SendByte) & 0B00000011);
    HX8347_GLCD_WR  = 0
    wait 10 us
    HX8347_GLCD_WR = 1
    HX8347_GLCD_CS = 1

end Sub

'''Send a data byte to the HX8347 GLCD
'''@param HX8347SendByte Byte to send
'''@hide
sub  GLCDSendData( IN HX8347SendByte as word )

    glcdSetWriteDir
    HX8347_GLCD_CS = 0
    HX8347_GLCD_RS = 1
    HX8347_GLCD_RD = 1

    #ifndef  8bitMode
      HX8347_GLCD_WR = 1
      PORTD = (PORTD & 0B00000011) | ((HX8347SendByte_h) & 0B11111100);
      PORTB = (PORTB & 0B11111100) | ((HX8347SendByte_h) & 0B00000011);
      HX8347_GLCD_WR = 0
      wait 10 us
    #endif

    HX8347_GLCD_WR = 1
    PORTD = (PORTD & 0B00000011) | ((HX8347SendByte) & 0B11111100);
    PORTB = (PORTB & 0B11111100) | ((HX8347SendByte) & 0B00000011);
    HX8347_GLCD_WR = 0
    wait 10 us
    HX8347_GLCD_WR = 1
    HX8347_GLCD_CS = 1


end Sub


sub HSerPrintLN (In PrintData As String, optional In comport = 1)
  dim PrintLen, SysPrintTemp as byte
  'PrintLen = LEN(PrintData$)
  PrintLen = PrintData(0)

  If PrintLen <> 0 then
    'Write Data
    for SysPrintTemp = 1 to PrintLen
      HSerSend(PrintData(SysPrintTemp),comport )
      Wait USART_DELAY
    next
  End If

  HSerSend(13,comport)
  Wait USART_DELAY
  HSerSend(10,comport)
  Wait USART_DELAY

End Sub



sub  GLCDreadID ( out DeviceID as word )

 if ( GLCDreadReg16(0x04) = 0x8000) then
      GlcdSetWriteDir
      GLCDSendCommand(0x03)
        wait 10 ms
        GLCDSendData(0xFF)
        GLCDSendData(0x83)
        GLCDSendData(0x57)
        wait 300 ms
    if ( GLCDreadReg16(0xD0) = 0x9900 ) then
      DeviceID = 0x8357
      devicestr =  "@reg(0xD0) HX8357"
      exit sub
    end if
 end if


 if ( GLCDreadReg16(0xBF) = 0x0002 ) then
    if ( GlcdReadData8 = 0x04 ) then
      if ( GlcdReadData16 = 0x9481 ) then
        DeviceID = 0x9481
        devicestr = "@reg(0xBF) ILI9481"
        exit sub
      end if
    end if
 end if

 if ( GLCDreadReg16(0xD3) = 0x9341) then
      DeviceID = 0x9341
      devicestr = "@reg(0xD3) ILI9341"
      exit sub
 end if

 if ( GLCDreadReg8(0x67) = 0x47) then
      DeviceID = 0x47
      devicestr =  "@reg(0x67) HX8347-A01"
      exit sub
 end if

 if ( GLCDreadReg16(0x00) = 0x7575) then
      DeviceID = 0x7575
      devicestr =  "@reg(0x00) HX8347-G(T)"
      exit sub
 end if



 'else revert to reg(0x00)
 GlcdSetWriteDir
 GLCDSendCommand(0x00)
 wait 10 ms
 DeviceID = GLCDreadReg16(0x00)
 devicestr =  "@reg(0x00) "
 GLCDReset



end sub
